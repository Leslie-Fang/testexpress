#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var sharedsession = require("express-socket.io-session");
var redis_client=require('../database/redis_api');
//var global_data=require('../database/global');
//this module loaded to get the login user name
//var my=require('../database/mysql_api');
//two different method to write
//var io = require('socket.io');
/**
 * Get port from environment and store in Express.
 */

 //use redis to log data

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port,function(){
  console.log('App start! Listen on port %s',port);
});

var io = require('socket.io')(server);
//connect session and socket.session
io.use(sharedsession(app.session));

//user_number to count the number connect to the 
var user_number=0;
io.on('connection', function(socket){
  console.log('a user connected');
  console.log(socket.handshake.session.user);
 // console.log(socket);
 // console.log(socket.handshake.sessionID);
 // console.log(socket.id);
  //change user numbers and emit the event
  user_number = user_number + 1;
 // console.log(user_number);

 /* redis_client.hexists("user_session_id",socket.handshake.sessionID,function(err, replies){
    if(replies == 0){
      //if new user, user-agent not exist in the hashmap
      //then set the uaer-agent and the user-id
      redis_client.hset("user_session_id",socket.handshake.sessionID,user_number);
      //redis_client.hset("user_id_ua",user_id_number,ua);
      //console.log("hexists_judge" + user_id_number);
    }
    else{
      console.log(replies);
      //console.log("hexists_judge" + user_id_number);
    }
  });*/

  io.emit('user number change', user_number);
 // redis_client.set("blue","uil");
 // app.rclient.set("bule","success_again");
  //console.log(app.rclient);
  /*
  //this jquery method has been removed
  socket.on('chat message', function(msg){
    console.log('message: ' + msg);
    //emit another event
    io.emit('chat message', msg);
  });*/

  socket.on('chat angular message', function(msg){
    console.log('message: ' + msg);
    /*emit another event
    the msg send back should add the username*/
    io.emit('chat message', socket.handshake.session.user+': '+msg);
  });
  /*socket.on('message', function(data){
    console.log(data.messgae);
  });*/

  socket.on('disconnect', function(){
    console.log('user disconnected');
    user_number=user_number-1;
    if(user_number < 0)
     {user_number = 0;}
    io.emit('user number change', user_number);
  });
});


//server be ready to receive the websocket connection
//var socket_io = io.listen(server);

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports = server;
